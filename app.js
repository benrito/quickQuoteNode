var ObjectId, Schema, TwitterStrategy, User, UserSchema, app, bodyParser, cookieParser, express, mongoose, passport, session;
var config = require('./config');
var appdetail= {appname: "quickQuote"}

//for twitter passportjs autentication and mongoose integration heavily drawn on this gist and used http://js2.coffee/ to convert from coffe script to js
// https://gist.github.com/ryohey/e43cef8b2334ef156f04
//and https://github.com/mattgaidica/twitter-mongo/blob/master/app.js

var srt_to_json = require('./interactive_video_components/processing/srt_to_hypertranscript.js')
//temporary hypertranscript, 
//TODO make CRUD for hypertranscript, with mongoose db
var hypertranscript_json = srt_to_json.convert('./media/test.srt');

//PASSPORT
passport = require("passport");
TwitterStrategy = require("passport-twitter").Strategy;

passport.use(new TwitterStrategy({
  consumerKey: config.twitter.consumer_key ,
  consumerSecret: config.twitter.consumer_secret,
  callbackURL: config.twitter.callbackURL
}, function(token, tokenSecret, profile, done) {
  //USER 
  return User.findOne({
    twitter_id: profile.id
  }, function(err, user) {
    if (user) {
      return done(null, user);
    }
    user = new User;
    user.twitter_id = profile.id;
    user.name = profile.username;
    user.screen_name = profile.displayName;
    user.description = profile._json.description;
    user.url = profile._json.url;
    console.log(user);
    return user.save(function(err) {
      return done(err, user);
    });
  });
}));

passport.serializeUser(function(user, done) {
  return done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  return User.findById(id, function(err, user) {
    return done(err, user);
  });
});

//DATABASE
mongoose = require("mongoose");

Schema = mongoose.Schema;

ObjectId = Schema.ObjectId;

UserSchema = new Schema({
  twitter_id: Number,
  name: String,
  screen_name: String,
  description: String,
  url: String
});

User = mongoose.model("User", UserSchema);
mongoose.connect("mongodb://localhost/quickQuoteNodeDb");


//EXPRESS
var express = require("express");
var app = express();

var session = require("express-session");
var cookieParser = require("cookie-parser");
var bodyParser = require("body-parser");

app.use(cookieParser());
app.use(bodyParser());

app.use(session({
  secret: "YOURSESSIONSECRET"
}));

app.use(passport.initialize());
app.use(passport.session());

//EXPRESS tempalting views and static content
app.set('view engine','ejs');
//to serve static assets line videos
app.use('/videos', express.static(__dirname + '/media'));
app.use('/css', express.static(__dirname + '/views/css'));
app.use('/js', express.static(__dirname + '/views/js'));



//EXPRESS ROUTES
app.get('/', function (req, res) {
  res.render('default',{title:'Welcome',appdetails: appdetail, user: req.user });
});

//EXPRESS ROUTES USER AUTENTHICATION
app.get("/hypertranscripts", function(req, res) {
  if (!req.isAuthenticated()) {
    res.redirect("/auth/twitter");
  }
  console.log(req.user);
  // return res.send("You are already authenticated.");
   res.render('hypertranscripts',{title:'Hypertranscripts',appdetails: appdetail, user: req.user});
});

// A new Transcript 
// app.get("/hypertranscripts/new", function(req, res) {
//   if (!req.isAuthenticated()) {
//     res.redirect("/auth/twitter");
//   }
//   console.log(req.user);
//   //THIS REDERECT IS NOT WORKING AS THE Main twitter one above handles it.
//   // return res.send("You are already authenticated.");
//    res.render('hypertranscript_new',{title:'Hypertranscript New',appdetails: appdetail});
// });

//One Transcript
app.get('/hypertranscripts/:id/show', function (req, res) {
   if (!req.isAuthenticated()) {
    res.redirect("/auth/twitter");
  }
  var id = req.params.id;
  //TODO Change this to CRUD for hypertranscript
  hp = (hypertranscript_json.id == id)? hypertranscript_json : undefined;
  res.render('hypertranscript_show',{title:'Hypertranscript',appdetails: appdetail, hypertranscript: hp, user: req.user });
});


//AUTH ROUTES
app.get("/auth/twitter", passport.authenticate("twitter"));

app.get("/auth/twitter/callback", passport.authenticate("twitter", {
  successRedirect: "/hypertranscripts",
  failureRedirect: "/failure"
}));

app.get('/logout', function(req, res){
  req.logout();
  res.redirect('/');
});

app.get("/failure", function(req, res) {
  return res.send("something wrong");
});

app.listen(3000);

// ---
// generated by coffee-script 1.9.2