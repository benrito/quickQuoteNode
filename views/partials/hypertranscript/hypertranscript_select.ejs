<!-- 
Client side hypertranscript select
TODO: detects html elements of selection
checks against hypertranscript json on client side 
and returns word objects in range. done.
TODO: refactor for clarity and legibility, need simpler way to do selection
 -->
<script>
/* *
 * Function that when selecting text from transcription populates the select quote form input fields.
 * Author, Quote Text, Time in, Time out, Duration.
 *
 * It does so by creating a range.
 * reads the time attribute from the word element.
 * Compares timecode in and time code out and inverts them if selection has been made from bottom to top.
 * Populates the Quote Select form input fields.
 *
 * */

 $(function() {
    'use strict';
    //magic numbers
     var twitterCharCountLimit=140;
     var allowedTwitterVideoTime= 30;
     var backgroundColorWarning = "#B22222";
     var textColorWarning ="white";
     //helper function to enable or disable export button
     function disableExportBtn(bool){
        
            document.getElementById("export").disabled = bool;        
     }
    //helper function updates char count box grabbing text from text area
    function charCountUpdate(){
        var charCount = $("#textQuote").val().split("").length
        $('#characters').val(charCount);
        //changes background if goes over twitter char limit
         if(charCount>twitterCharCountLimit){
            document.getElementById('characters').style.backgroundColor= backgroundColorWarning;
            document.getElementById('characters').style.color=textColorWarning;
            //TODO: here disable export button
            disableExportBtn(true);
        }else{
            document.getElementById('characters').style.backgroundColor="";
            document.getElementById('characters').style.color="";
            //disable unless duration is over allowed specs
            var duration = document.getElementById('duration').value;
           if (parseFloat(duration)>allowedTwitterVideoTime) {
                disableExportBtn(true);
            } else{
                disableExportBtn(false);
            }
        }
    }

    //helper, updates progress bar using char count
    function progressBarUpdate(){
          //progress bar - %
        var $pb = $('.progress .progress-bar');
        ///////////////
        //progress bar
       
        var charCount = $("#textQuote").val().split("").length
        var percentageCharCount = charCount/twitterCharCountLimit*100;
        var $pb = $('.progress .progress-bar');
        $pb.attr('data-transitiongoal', percentageCharCount).progressbar({display_text: 'fill'});
        /////////////
    }
    
    //when user types in text area 
    $("#textQuote").on("change keyup paste", function() {
      charCountUpdate();  
      progressBarUpdate();
        
    });
    /////////////////////


    var quote;
    $(".transcription").mouseup(function() {

        //SELECTION
        // clear quote 140 char erro message on new selection
        var notice  =  document.getElementById("validationNotice");
        notice.innerHTML = '';
        //selection 
        var selection;
        console.log("selection made");
        if (window.getSelection) {
            selection = window.getSelection();
        } else if (document.selection) {
            selection = document.selection.createRange();
        }
        quote = selection.toString();
        //removes new lines divisions in the text of the quote
        quote = quote.replace(/(\r\n|\n|\r)/gm,"");
        //add quotes " a round text selection line
        quote = "\""+quote.charAt(0).toUpperCase() + quote.slice(1)+"\"";

        //text area - text quote
        $("#textQuote").val(quote);
      
        
       /////////////SELECTION - RANGE
       //first in seleciton
        var firstInSeleciton =  selection.focusNode.parentNode;
        //last in selection
        var lastInSelection = selection.anchorNode.parentNode;

        var rangeObject = getRangeObject(selection);
        function getRangeObject(selectionObject) {
            if (selectionObject.getRangeAt)
                return selectionObject.getRangeAt(0);
            else { // Safari!
                var range = document.createRange();
                range.setStart(selectionObject.anchorNode,selectionObject.anchorOffset);
                range.setEnd(selectionObject.focusNode,selectionObject.focusOffset);
                return range;
            }
        }

        var selection_in;
        var selection_out;

        var startID;
        var endID;
        //startContainer
        if (rangeObject.startContainer.parentNode.className == "line"){
            // selection_in  =  rangeObject.startContainer.parentNode.firstElementChild.attributes[1].value;
            selection_in  = rangeObject.startContainer.previousElementSibling.getAttribute("startTime");
             startID=rangeObject.startContainer.previousElementSibling.getAttribute("id");
            console.log("flag1");
            // //////////////////
        }else if(rangeObject.startContainer.parentNode.className == "word read" || rangeObject.startContainer.parentNode.className == "word not-read"){
            var selection_in= rangeObject.startContainer.getAttribute("starttime");
             startID=rangeObject.startContainer.getAttribute("id");
             console.log("flag2");
        }else{
            console.log("not a line not a word");
            var selection_in= rangeObject.startContainer.parentNode.getAttribute("starttime");
            startID= rangeObject.startContainer.parentNode.getAttribute("id");
             console.log("flag3");
        }

        //endContainer
        if (rangeObject.endContainer.parentNode.className == "line"){
            //selection_out  =  rangeObject.endContainer.parentNode.firstElementChild.attributes[2].value;
            selection_out  = rangeObject.endContainer.previousElementSibling.getAttribute("starttime");
            endID = rangeObject.endContainer.previousElementSibling.getAttribute("id");
             console.log("flag4");
             // //////////////////
        }else if(rangeObject.endContainer.parentNode.className == "word read" || rangeObject.endContainer.parentNode.className == "word not-read"){
            var selection_out= rangeObject.endContainer.parentNode.getAttribute("endtime");
            endID= rangeObject.endContainer.parentNode.getAttribute("id");
             console.log("flag5");
        }else if(rangeObject.endContainer.className=="line") {
            var selection_out= rangeObject.endContainer.firstChild.nextSibling.getAttribute("endtime");
            endID= rangeObject.endContainer.firstChild.nextSibling.getAttribute("id");
             console.log("flag6");
        }else{
            console.log("not a line not a word");
           var selection_out= rangeObject.endContainer.parentNode.getAttribute("endtime");
            endID= rangeObject.endContainer.parentNode.getAttribute("id");
            console.log("flag7");
        }

        //     selection_in >=<  selection_out //
        var tc_in;
        var tc_out;

        if ( parseFloat(selection_in) >  parseFloat(selection_out)){//parse int
            tc_in = selection_out;
            tc_out = selection_in;
        }else {
            tc_in =selection_in;
            tc_out =selection_out;
        }
      
      //following code identifies elment in hypertranscript that matches selection. to solve issue when selecting blank spaces/elements =>Nan
        var startElementID=endID;
        var endElementID=startID;
        var startElement;
        var endElement;
        var selectionElements=[];
        for(var i=0; i<hypertranscript.words.length; i++){
            if(hypertranscript.words[i].id== startID){
            startElement=hypertranscript.words[i];
            }
            if(hypertranscript.words[i].id== endID){
            endElement=hypertranscript.words[i];
            }
            //range of words objects
            if((hypertranscript.words[i].id>= startID ) &&(hypertranscript.words[i].id<= endID) ){
                var element=hypertranscript.words[i];
                selectionElements.push(element);
            }

        }

        //input - timecode
        $('#input').val(toHHMMSS(startElement.startTime));
        //output - timecode
        $('#output').val(toHHMMSS(endElement.endTime));


        ////////////DURATION
        //duration - seconds
        $('#duration').val()
        var duration = parseFloat(tc_out) -  parseFloat(tc_in);

        $('#duration').val(toHHMMSS(duration));

        if(duration>allowedTwitterVideoTime){
            document.getElementById('duration').style.backgroundColor=backgroundColorWarning;
            document.getElementById('duration').style.color=textColorWarning;
            
            //TODO: here disable export button
            disableExportBtn(true);
        }else{
            document.getElementById('duration').style.backgroundColor="";
            document.getElementById('duration').style.color="";
            //TODO: here enable export button
            disableExportBtn(false);
        }
    
    //charchters - count
       charCountUpdate(); 
       progressBarUpdate();
    });


});
//////////////helper function convert seconds
//take in seconds as paramter
function toHHMMSS (sec) {
    var sec_num = parseInt(sec, 10); // don't forget the second param
    var hours   = Math.floor(sec_num / 3600);
    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
    var seconds = sec_num - (hours * 3600) - (minutes * 60);

    if (hours   < 10) {hours   = "0"+hours;}
    if (minutes < 10) {minutes = "0"+minutes;}
    if (seconds < 10) {seconds = "0"+seconds;}
    var time    = hours+':'+minutes+':'+seconds;
    return time;
}
////////////////


</script>






